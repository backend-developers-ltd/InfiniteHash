version: '3.7'

services:
  redis:
    image: mirror.gcr.io/valkey/valkey:8.1-alpine
    command: valkey-server --appendonly yes
    healthcheck:
      test: valkey-cli ping
    restart: unless-stopped
    volumes:
      - ./redis/data:/data
    logging: &logging
      driver: journald
      options:
        tag: '{{.Name}}'

  db:
    image: postgres:14.0-alpine
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} || exit 1
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./db/data:/var/lib/postgresql/data
    logging:
      <<: *logging

  backups:
    build:
      context: backups/
      dockerfile: Dockerfile
    init: true
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - BACKUP_LOCAL_DIR=/var/backups
      - BACKUP_LOCAL_ROTATE_KEEP_LAST=${BACKUP_LOCAL_ROTATE_KEEP_LAST}
      - B2_BUCKET=${BACKUP_B2_BUCKET}
      - B2_FOLDER=${BACKUP_B2_FOLDER}
      - B2_APPLICATION_KEY_ID=${BACKUP_B2_APPLICATION_KEY_ID}
      - B2_APPLICATION_KEY=${BACKUP_B2_APPLICATION_KEY}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_TARGET=${EMAIL_TARGET}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - backups:/var/backups
    depends_on:
      - db
    logging:
      <<: *logging

  app:
    build:
      context: .
      dockerfile: app/Dockerfile
    image: luxor_subnet/app
    healthcheck:
      test: ["CMD", "./healthcheck.py", "/var/run/gunicorn/gunicorn.sock"]
    init: true
    restart: unless-stopped
    env_file: ./.env
    environment:
      # Add this variable to all containers that should dump Prometheus metrics.  Each container besides this one
      # should use a different subdirectory of /prometheus-multiproc-dir, e.g.
      # - PROMETHEUS_MULTIPROC_DIR=/prometheus-multiproc-dir/other-container
      # Don't forget to also mount the prometheus-metrics volume in other containers too.
      - PROMETHEUS_MULTIPROC_DIR=/prometheus-multiproc-dir
    volumes:
      - backend-static:/root/src/static
      - gunicorn-socket:/var/run/gunicorn
      - ./media:/root/src/media
      # Add this mount to each container that should dump Prometheus metrics.
      - ./prometheus-metrics:/prometheus-multiproc-dir
    depends_on:
      - redis
      - db
    logging:
      <<: *logging

  celery-worker:
    image: luxor_subnet/app
    init: true
    healthcheck:
      test: celery -A luxor_subnet status > /dev/null || exit 1
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DEBUG=off
      - PROMETHEUS_MULTIPROC_DIR=/prometheus-multiproc-dir/celery-worker
    command: ./celery-entrypoint.sh
    volumes:
      - ./prometheus-metrics:/prometheus-multiproc-dir
    tmpfs: /run
    depends_on:
      - redis
    logging:
      <<: *logging

  celery-beat:
    image: luxor_subnet/app
    init: true
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DEBUG=off
    command: nice celery -A luxor_subnet beat -l INFO --schedule /tmp/celerybeat-schedule -f /tmp/logs/celery-beat.log
    volumes:
      - ./logs:/tmp/logs
    depends_on:
      - redis
    logging:
      <<: *logging

  celery-flower:
    image: luxor_subnet/app
    healthcheck:
      test: wget --user "${CELERY_FLOWER_USER}" --password "${CELERY_FLOWER_PASSWORD}" -qO- 127.0.0.1:5555 > /dev/null || exit 1
    init: true
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DEBUG=off
      - FLOWER_TASK_RUNTIME_METRIC_BUCKETS=1,2,3,5,10,20,30,45,60,120,180,240,300,600,inf
    command: celery --app=luxor_subnet --broker="${CELERY_BROKER_URL}" flower --basic_auth="${CELERY_FLOWER_USER}:${CELERY_FLOWER_PASSWORD}"
    depends_on:
      - celery-worker
    ports:
      - 127.0.0.1:5555:5555
    logging:
      <<: *logging

  nginx:
    image: 'ghcr.io/reef-technologies/nginx-rt:v1.2.2'
    restart: unless-stopped
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl 0.0.0.0:80/alive/ -s --fail -H \"Host: $NGINX_HOST\" -H \"User-Agent: docker-compose-healthcheck\" -o /dev/null || exit 1"
      ]
      interval: 30s
      retries: 5
      start_period: 20s
      timeout: 10s
    environment:
      - NGINX_HOST=${NGINX_HOST}
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/config_helpers:/etc/nginx/config_helpers
      - backend-static:/srv/static:ro
      - ./media:/srv/media:ro
      - ./letsencrypt/etc:/etc/letsencrypt
      - ./nginx/monitoring_certs:/etc/monitoring_certs
      - gunicorn-socket:/var/run/gunicorn:ro
    depends_on:
      - app
      - cadvisor
      - node-exporter
    command: nginx -g 'daemon off;'
    ports:
      - 80:80
      - 443:443
      - 10443:10443
    logging:
      <<: *logging
    extra_hosts:
      - "host.docker.internal:host-gateway"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    network_mode: host
    pid: host
    volumes:
      - /:/host:ro,rslave
      - nodeexporter_collectors:/textfile_collectors

    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|run|boot|var/.+)($$|/)'
    logging:
      <<: *logging

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.40.0
    container_name: cadvisor
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    restart: unless-stopped
    logging:
      <<: *logging

  alloy:
    image: grafana/alloy:v1.8.3
    restart: unless-stopped
    environment:
      - LOKI_URL=${LOKI_URL}
      - LOKI_USER=${LOKI_USER}
      - LOKI_PASSWORD=${LOKI_PASSWORD}
    volumes:
      - ./alloy:/etc/alloy
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - alloy-data:/var/lib/alloy
    command:
      - run
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    logging:
      <<: *logging

volumes:
  backend-static:
  backups:
  gunicorn-socket:
  nodeexporter_collectors:
  alloy-data:
